#!/usr/bin/env node
'use strict';

var program = require('commander'),
    pkg = require('../package.json'),
    path = require('path');

var watch = require('node-watch');
var log = require('logtopus');
log.setLevel('sys');

var Superjoin = require('../modules/superjoin');

program.version(pkg.version)
    .usage('[options] <files ...>')
    .option('-o, --outfile <outfile>', 'Write joined file to <outfile>. If this option is not present write to STDOUT')
    .option('-d, --dev', 'Enables autoloading of scripts using XHR that hadn\'t been added to the bundle file')
    .option('-b, --banner <banner>', 'Adds <banner> at the beginning of the bundle')
    .option('-r, --root <path>', 'Sets a root path')
    .option('-u, --umd <name>', 'Create a bundle and return its as an umd module. Using <name> as module name')
    .option('-s, --superjoin-file', 'Use file as superjoin file')
    .option('-w, --watch', 'Watch .js files for changes and rebuilds the bundle')
    .option('-v, --verbose', 'Enable console logging')
    .parse(process.argv);

var conf = {
    verbose: program.verbose,
    umd: program.umd || false,
    autoload: program.autoload,
    libDir: program.libDir,
    scriptFile: program.outfile,
    root: program.root
};

if (program.superjoin) {
    conf.confFiles = [program.superjoinFile];
}


var superjoin = new Superjoin(conf);

if (program.args) {
    superjoin.scripts = program.args;
}


var run = function() {
    superjoin.map();
    if (!program.outfile) {
        process.stdout.write(superjoin.bundle);
    }
};

run();

if (program.watch) {
    if (program.watch === true) {
        program.watch = '**/*.js';
    }

    var watchOpts = {
        recusive: true,
        followSymlinks: true
    };

    var ignore = new RegExp(program.outfile + '$');
    watch(superjoin.root, watchOpts, function(file) {
        superjoin.clearCache();
        if (ignore.test(file)) {
            return;
        }

        log.sys('File changed:', program.outfile, file);
        run();
    });
}
